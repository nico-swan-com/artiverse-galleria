name: 'Setup and install Node'
description: 'Detect the package manager being used in the project and executes the installation of the dependencies. i.e.'

outputs:
  manager:
    description: 'The package manager detected'
    value: ${{ steps.detect.outputs.manager }}
  command:
    description: 'The command to run the package manager'
    value: ${{ steps.detect.outputs.command }}
  runner:
    description: 'The runner to use for the package manager'
    value: ${{ steps.detect.outputs.runner }}

runs:
  using: 'composite'
  steps:
    - name: 'Detect Package Manager'
      id: detect
      run: |
        if [ -f "${{ github.workspace }}/yarn.lock" ]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=yarn" >> $GITHUB_OUTPUT
          exit 0
        elif [ -f "${{ github.workspace }}/package.json" ]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
          echo "command=ci" >> $GITHUB_OUTPUT
          echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "Unable to determine package manager"
          exit 1
        fi
      shell: bash

    - name: 'Setup Node'
      uses: actions/setup-node@v4
      with:
        node-version: '18.20.6'
        cache: ${{ steps.detect.outputs.manager }}

    - name: 'Restore cache'
      uses: actions/cache@v4
      with:
        path: |
          _next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

    - name: 'Install dependencies'
      run: ${{ steps.detect.outputs.manager }} ${{ steps.detect.outputs.command }}
      shell: bash
